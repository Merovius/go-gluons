package writer

import (
	"bufio"
	"io"
	"net"
	"net/http"
)

// NewResponseWriter wraps an http.ResponseWriter, returning a proxy that allows you to
// hook into various parts of the response process.
func NewResponseWriter(w http.ResponseWriter, protoMajor int) ResponseWriter {
	bw := BasicWriter{ResponseWriter: w}
	if protoMajor == 2 {
		return &HttpTwoWriter{bw}
	}
	return &HttpOneWriter{bw}
}

func SetProxyStatusCode(w ResponseWriter, code int) {
	w.(*BasicWriter).code = code
}

// ResponseWriter is a proxy around an http.ResponseWriter that allows you to hook
// into various parts of the response process.
type ResponseWriter interface {
	http.ResponseWriter
	// Status returns the HTTP status of the request, or 0 if one has not
	// yet been sent.
	Status() int
	// BytesWritten returns the total number of bytes sent to the client.
	BytesWritten() int
	// Tee causes the response body to be written to the given io.Writer in
	// addition to proxying the writes through. Only one io.Writer can be
	// tee'd to at once: setting a second one will overwrite the first.
	// Writes will be sent to the proxy before being written to this
	// io.Writer. It is illegal for the tee'd writer to be modified
	// concurrently with writes.
	Tee(io.Writer)
	// Unwrap returns the original proxied target.
	Unwrap() http.ResponseWriter
}

// basicWriter wraps a http.ResponseWriter that implements the minimal
// http.ResponseWriter interface.
type BasicWriter struct {
	http.ResponseWriter
	wroteHeader bool
	code        int
	bytes       int
	tee         io.Writer
}

func (b *BasicWriter) WriteHeader(code int) {
	if !b.wroteHeader {
		b.code = code
		b.wroteHeader = true
		b.ResponseWriter.WriteHeader(code)
	}
}

func (b *BasicWriter) Write(buf []byte) (int, error) {
	n, err := b.ResponseWriter.Write(buf)
	if b.tee != nil {
		_, err2 := b.tee.Write(buf[:n])
		// Prefer errors generated by the proxied writer.
		if err == nil {
			err = err2
		}
	}
	b.bytes += n
	return n, err
}

func (b *BasicWriter) maybeWriteHeader() {
	if !b.wroteHeader {
		b.WriteHeader(http.StatusOK)
	}
}

func (b *BasicWriter) Status() int {
	return b.code
}

func (b *BasicWriter) BytesWritten() int {
	return b.bytes
}

func (b *BasicWriter) Tee(w io.Writer) {
	b.tee = w
}

func (b *BasicWriter) Unwrap() http.ResponseWriter {
	return b.ResponseWriter
}

func (b *BasicWriter) CloseNotify() <-chan bool {
	cn := b.ResponseWriter.(http.CloseNotifier)
	return cn.CloseNotify()
}

func (b *BasicWriter) Flush() {
	fl := b.ResponseWriter.(http.Flusher)
	fl.Flush()
}

// HttpOneWriter is a HTTP writer that additionally satisfies http.Hijacker,
// and io.ReaderFrom.
type HttpOneWriter struct {
	BasicWriter
}

func (f *HttpOneWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	hj := f.BasicWriter.ResponseWriter.(http.Hijacker)
	return hj.Hijack()
}

func (f *HttpOneWriter) ReadFrom(r io.Reader) (int64, error) {
	if f.BasicWriter.tee != nil {
		return io.Copy(&f.BasicWriter, r)
	}
	rf := f.BasicWriter.ResponseWriter.(io.ReaderFrom)
	n, err := rf.ReadFrom(r)
	f.BasicWriter.bytes += int(n)
	return n, err
}

// HttpTwoWriter is a HTTP2 writer that additionally satisfies
// Push
type HttpTwoWriter struct {
	BasicWriter
}

func (f *HttpTwoWriter) Push(target string, opts *http.PushOptions) error {
	return f.BasicWriter.ResponseWriter.(http.Pusher).Push(target, opts)
}
